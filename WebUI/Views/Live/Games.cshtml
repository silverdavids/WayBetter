@{
    ViewBag.Title = "Live";
    Layout = "~/Views/Shared/_LiveLayoutPage.cshtml";
}
<style>
    .table thead > tr > th, .table tbody > tr > th, .table tfoot > tr > th, .table thead > tr > td, .table tbody > tr > td, .table tfoot > tr > td {
        border-top: 0;
    }

    .table-striped tbody > tr:nth-child(odd) > td,
    .table-striped tbody > tr:nth-child(odd) > th {
        background-color: #2c3e50;
    }

    .table-striped tbody > tr:nth-child(even) > td,
    .table-striped tbody > tr:nth-child(even) > th {
        background-color: #34495e;
    }

    #MatchTable tbody > tr {
        color: #ffffff;
    }

    .raised {
        background-color: #2ecc71;
    }
    .dropped {
        background-color: #b22222;
    }

    #MatchTable tbody > tr td.FT-1,
    #MatchTable tbody > tr td.FT-X,
    #MatchTable tbody > tr td.FT-2,
    #MatchTable tbody > tr td.RM-1,
    #MatchTable tbody > tr td.RM-X,
    #MatchTable tbody > tr td.RM-2,
    #MatchTable tbody > tr td.NG-1,
    #MatchTable tbody > tr td.NG-X,
    #MatchTable tbody > tr td.NG-2,
    #MatchTable tbody > tr td.over,
    #MatchTable tbody > tr td.under {
        text-align: center;
    }
</style>

<div>
    <div class="row">
        <div class="col-lg-12"><h2 class="heading">Live </h2></div>
        <div class="col-lg-12">

            <div id="gameTable">
                <table class="table table-condensed table-striped table-responsive" id="MatchTable">
                    <thead>
                        <tr><th colspan="5"></th><th colspan="3" class="text-center">Full&nbsp;Time</th><th colspan="3" class="text-center">Under/Over</th><th colspan="3" class="text-center">Rest&nbsp;Of&nbsp;Match</th><th colspan="3" class="text-center">Next&nbsp;Goal</th></tr>
                        <tr style="background-color:#0D1F35 !important; color: #ffffff;">
                            <th>Match No</th>
                            <th>Min</th>
                            <th>Home</th>
                            <th>Score</th>
                            <th>Away</th>
                            <th class="text-center">1</th>
                            <th class="text-center">X</th>
                            <th class="text-center">2</th>
                            <th class="text-center"><i class="fa fa-sort-down"></i></th>
                            <th class="text-center"></th>
                            <th class="text-center"><i class="fa fa-sort-up"></i></th>
                            <th class="text-center">1</th>
                            <th class="text-center">X</th>
                            <th class="text-center">2</th>
                            <th class="text-center">1</th>
                            <th class="text-center">X</th>
                            <th class="text-center">2</th>
                        </tr>
                    </thead>
                    <tbody id="tbody">
                       
                        @*<tr class="loading text-center"><td colspan="11">loading...</td></tr>*@
                    </tbody>
                </table>
            </div>
        </div>
        
    </div>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.1.2.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        (function ($) {

            $.fn.extend({

                addTemporaryClass: function (className, duration) {
                    var elements = this;
                    setTimeout(function () {
                        elements.removeClass(className);
                    }, duration);

                    return this.each(function () {
                        $(this).addClass(className);
                    });
                }
            });

        })(jQuery);

        $(function () {
            // A simple templating method for replacing placeholders enclosed in curly braces.
            if (!String.prototype.supplant) {
                String.prototype.supplant = function (o) {
                    return this.replace(/{([^{}]*)}/g,
                        function (a, b) {
                            var r = o[b];
                            return typeof r === 'string' || typeof r === 'number' ? r : a;
                        }
                    );
                };
            }

            $(function () {

                var ticker = $.connection.liveBetHub,
                    $gameTable = $('#MatchTable'),
                    $gamesTableBody = $gameTable.find('#tbody');



                function init() {
                    ticker.server.testString().done(function (string) {
                        console.log(string);
                    });

                    // get all livescores
                    ticker.server.getAllGames().done(function (games) {
                        $gamesTableBody.empty();
                        console.log(games);
                        $.each(games, function () {

                            var game = this;
                            if (game.FullTimeOdds == null) {
                                game.FullTimeOdds = {
                                    AwayWins: "N/A",
                                    Draw: "N/A",
                                    HomeWins: "N/A"
                                };
                            }
                            if (game.RestofMatch == null) {
                                game.RestofMatch = {
                                    AwayWins: "N/A",
                                    Draw: "N/A",
                                    HomeWins: "N/A"
                                };
                            }
                            if (game.NextGoal == null) {
                                game.NextGoal = {
                                    AwayScores: "N/A",
                                    Draw: "N/A",
                                    HomeScores: "N/A"
                                };
                            }

                            if (game.UnderOverOdds == null) {
                                game.UnderOverOdds = {
                                    Under: "N/A",
                                    Over: "N/A",
                                    ExtraValue: "N/A"
                                };
                            }
                            var rowTemplate = '<tr id="' + game.MatchNo + '">' +
                              '<td>' + game.MatchNo + '</td>' +
                              '<td>' + game.Minutes + '</td>' +
                              '<td>' + game.LocalTeam + '</td>' +
                              '<td>' + game.LocalTeamScore + ' - ' + game.AwayTeamScore + '</td>' +
                              '<td>' + game.AwayTeam + '</td>' +
                              '<td class="FT-1" style="padding-bottom: 0px;">' + game.FullTimeOdds.HomeWins + '</td>' +
                              '<td class="FT-X">' + game.FullTimeOdds.Draw + '</td>' +
                              '<td class="FT-2">' + game.FullTimeOdds.AwayWins + '</td>' +
                              '<td class="under">' + game.UnderOverOdds.Under + '</td>' +
                              '<td class="text-center">' +
                              '  <span style="color:#E9860D;">' + game.UnderOverOdds.ExtraValue + '</span>' +
                              '</td>' +
                              '<td class="over">' + game.UnderOverOdds.Over + '</td>' +
                              '<td class="RM-1" style="padding-bottom: 0px;">' + game.RestofMatch.HomeWins + '</td>' +
                              '<td class="RM-X">' + game.RestofMatch.Draw + '</td>' +
                              '<td class="RM-2">' + game.RestofMatch.AwayWins + '</td>' +
                              '<td class="NG-1" style="padding-bottom: 0px;">' + game.NextGoal.HomeScores + '</td>' +
                              '<td class="NG-X">' + game.NextGoal.Draw + '</td>' +
                              '<td class="NG-2">' + game.NextGoal.AwayScores + '</td>' +
                              '</tr>';
                            $gamesTableBody.append(rowTemplate);
                        });
                    });
                }

                // Add a client-side hub method that the server will call
                ticker.client.updateGame = function (game) {
                    console.clear();
                    console.log(game);
                    if (game.FullTimeOdds == null) {
                        game.FullTimeOdds = {
                            AwayWins: "N/A",
                            Draw: "N/A",
                            HomeWins: "N/A"
                        };
                    }
                    if (game.RestofMatch == null) {
                        game.RestofMatch = {
                            AwayWins: "N/A",
                            Draw: "N/A",
                            HomeWins: "N/A"
                        };
                    }
                    if (game.NextGoal == null) {
                        game.NextGoal = {
                            AwayScores: "N/A",
                            Draw: "N/A",
                            HomeScores: "N/A"
                        };
                    }

                    if (game.UnderOverOdds == null) {
                        game.UnderOverOdds = {
                            Under: "N/A",
                            Over: "N/A",
                            ExtraValue: "N/A"
                        };
                    }
                    var rowTemplate = '<tr id="' + game.MatchNo + '">' +
                               '<td>' + game.MatchNo + '</td>' +
                               '<td>' + game.Minutes + '</td>' +
                               '<td>' + game.LocalTeam + '</td>' +
                               '<td>' + game.LocalTeamScore + ' - ' + game.AwayTeamScore + '</td>' +
                               '<td>' + game.AwayTeam + '</td>' +
                               '<td class="FT-1" style="padding-bottom: 0px;">' + game.FullTimeOdds.HomeWins + '</td>' +
                               '<td class="FT-X">' + game.FullTimeOdds.Draw + '</td>' +
                               '<td class="FT-2">' + game.FullTimeOdds.AwayWins + '</td>' +
                               '<td class="under">' + game.UnderOverOdds.Under + '</td>' +
                               '<td class="text-center">' +
                               '  <span style="color:#E9860D;">' + game.UnderOverOdds.ExtraValue + '</span>' +
                               '</td>' +
                               '<td class="over">' + game.UnderOverOdds.Over + '</td>' +
                               '<td class="RM-1" style="padding-bottom: 0px;">' + game.RestofMatch.HomeWins + '</td>' +
                               '<td class="RM-X">' + game.RestofMatch.Draw + '</td>' +
                               '<td class="RM-2">' + game.RestofMatch.AwayWins + '</td>' +
                               '<td class="NG-1" style="padding-bottom: 0px;">' + game.NextGoal.HomeScores + '</td>' +
                               '<td class="NG-X">' + game.NextGoal.Draw + '</td>' +
                               '<td class="NG-2">' + game.NextGoal.AwayScores + '</td>' +
                               '</tr>';
                    var FT1 = $gamesTableBody.find('#' + game.MatchNo + ' > td.FT-1').html();
                    console.log(FT1)
                    var FTX = $gamesTableBody.find('#' + game.MatchNo + ' > td.FT-X').html();
                    var FT2 = $gamesTableBody.find('#' + game.MatchNo + ' > td.FT-2').html();

                    var under = $gamesTableBody.find('#' + game.MatchNo + ' > td.under').html();
                    var over = $gamesTableBody.find('#' + game.MatchNo + ' > td.over').html();

                    var RM1 = $gamesTableBody.find('#' + game.MatchNo + ' > td.RM-1').html();
                    var RMX = $gamesTableBody.find('#' + game.MatchNo + ' > td.RM-X').html();
                    var RM2 = $gamesTableBody.find('#' + game.MatchNo + ' > td.RM-2').html();

                    var NG1 = $gamesTableBody.find('#' + game.MatchNo + ' > td.NG-1').html();
                    var NGX = $gamesTableBody.find('#' + game.MatchNo + ' > td.NG-X').html();
                    var NG2 = $gamesTableBody.find('#' + game.MatchNo + ' > td.NG-2').html();

                    // full time
                    if ($gamesTableBody.find('tr[id=' + game.MatchNo + ']').length > 0) {
                        $gamesTableBody.find('tr[id=' + game.MatchNo + ']')
                            .replaceWith(rowTemplate);
                    } else {
                        $gamesTableBody.append(rowTemplate);
                    }
                    if (parseInt(FT1) > parseInt(game.FullTimeOdds.HomeWins)) {
                        $('#' + game.MatchNo + ' > td.FT-1').addTemporaryClass("dropped", 3000);

                    }
                    if (parseInt(FT1) < parseInt(game.FullTimeOdds.HomeWins)) {
                        $('#' + game.MatchNo + ' > td.FT-1').addTemporaryClass("raised", 3000);
                    }
                    if (parseInt(FTX) > parseInt(game.FullTimeOdds.Draw)) {
                        $('#' + game.MatchNo + ' > td.FT-X').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(FTX) < parseInt(game.FullTimeOdds.Draw)) {
                        $('#' + game.MatchNo + ' > td.FT-X').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }
                    if (parseInt(FT2) > parseInt(game.FullTimeOdds.AwayWins)) {
                        $('#' + game.MatchNo + ' > td.FT-2').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(FT2) < parseInt(game.FullTimeOdds.AwayWins)) {
                        $('#' + game.MatchNo + ' > td.FT-2').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }

                    // under/over
                    if (parseInt(under) > parseInt(game.UnderOverOdds.Under)) {
                        $('#' + game.MatchNo + ' > td.under').addTemporaryClass("dropped", 3000);

                    }
                    if (parseInt(under) < parseInt(game.UnderOverOdds.Under)) {
                        $('#' + game.MatchNo + ' > td.under').addTemporaryClass("raised", 3000);
                    }
                    if (parseInt(over) > parseInt(game.UnderOverOdds.Over)) {
                        $('#' + game.MatchNo + ' > td.over').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(over) < parseInt(game.UnderOverOdds.Over)) {
                        $('#' + game.MatchNo + ' > td.over').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }

                    // rest of match
                    if (parseInt(RM1) > parseInt(game.RestofMatch.HomeWins)) {
                        $('#' + game.MatchNo + ' > td.RM-1').addTemporaryClass("dropped", 3000);

                    }
                    if (parseInt(RM1) < parseInt(game.RestofMatch.HomeWins)) {
                        $('#' + game.MatchNo + ' > td.RM-1').addTemporaryClass("raised", 3000);
                    }
                    if (parseInt(RMX) > parseInt(game.RestofMatch.Draw)) {
                        $('#' + game.MatchNo + ' > td.RM-X').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(RMX) < parseInt(game.RestofMatch.Draw)) {
                        $('#' + game.MatchNo + ' > td.RM-X').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }
                    if (parseInt(RM2) > parseInt(game.RestofMatch.AwayWins)) {
                        $('#' + game.MatchNo + ' > td.RM-2').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(RM2) < parseInt(game.RestofMatch.AwayWins)) {
                        $('#' + game.MatchNo + ' > td.RM-2').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }

                    // next goal
                    if (parseInt(NG1) > parseInt(game.NextGoal.HomeScores)) {
                        $('#' + game.MatchNo + ' > td.NG-1').addTemporaryClass("dropped", 3000);

                    }
                    if (parseInt(NG1) < parseInt(game.NextGoal.HomeScores)) {
                        $('#' + game.MatchNo + ' > td.NG-1').addTemporaryClass("raised", 3000);
                    }
                    if (parseInt(NGX) > parseInt(game.NextGoal.Draw)) {
                        $('#' + game.MatchNo + ' > td.NG-X').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(NGX) < parseInt(game.NextGoal.Draw)) {
                        $('#' + game.MatchNo + ' > td.NG-X').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }
                    if (parseInt(NG2) > parseInt(game.NextGoal.AwayScores)) {
                        $('#' + game.MatchNo + ' > td.NG-2').addTemporaryClass("dropped", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' down');

                    }
                    if (parseInt(NG2) < parseInt(game.NextGoal.AwayScores)) {
                        $('#' + game.MatchNo + ' > td.NG-2').addTemporaryClass("raised", 3000);
                        console.log(FT1 + ' ' + FTX + ' ' + FT2 + ' up');
                    }
                };
                // Start the connection
                $.connection.hub.start().done(init);

            });
        })

    </script>}